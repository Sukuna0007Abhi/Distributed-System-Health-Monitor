# Distributed System Health Monitor Configuration with CoRIM Integration
# This configuration demonstrates the complete CoRIM integration setup

server:
  host: "0.0.0.0"
  port: 8443
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 120s
  tls:
    enabled: true
    cert_file: "./certs/server.crt"
    key_file: "./certs/server.key"
    ca_file: "./certs/ca.crt"

# Redis configuration for general caching and CoRIM storage
redis:
  addresses: ["localhost:6379"]
  cluster_mode: false
  password: ""
  db: 0
  max_retries: 3
  pool_size: 100
  dial_timeout: 5s
  read_timeout: 3s
  write_timeout: 3s
  pool_timeout: 4s

# CoRIM Integration Configuration (ðŸš€ ENABLED!)
corim:
  enabled: true  # ðŸŸ¢ CoRIM functionality is enabled
  profiles_path: "./configs/corim-profiles"
  auto_load: true  # Automatically load profiles on startup
  
  # Redis storage for CoRIM profiles and reference values
  storage:
    type: "redis"
    redis_addr: "localhost:6379"
    redis_password: ""
    redis_db: 1  # Separate database for CoRIM data
    key_prefix: "corim:"
    ttl: "24h"  # Default TTL for cached data
    max_connections: 50
    connect_timeout: "5s"
    read_timeout: "3s"
    write_timeout: "3s"
  
  # CBOR parser configuration
  parser:
    max_file_size: 10485760  # 10MB maximum CoRIM file size
    validate_on_load: true   # Validate CoRIM structure on load
    strict_mode: false       # Allow warnings in non-strict mode
    enable_metrics: true     # Enable Prometheus metrics
    enable_debug_logs: true  # Enable detailed logging for troubleshooting
  
  # CoRIM profile sources (for auto-loading)
  sources:
    - type: "filesystem"
      path: "./configs/corim-profiles"
      enabled: true
      options:
        watch: "true"  # Watch for file changes
        pattern: "*.cbor"

# Attestation service configuration with CoRIM integration
attestation:
  enabled: true
  max_concurrent_requests: 1000
  request_timeout: 30s
  
  # Evidence caching configuration
  cache:
    type: "redis"
    redis:
      addresses: ["localhost:6379"]
      cluster_mode: false
      password: ""
      db: 0
      max_retries: 3
      pool_size: 100
    ttl: 3600s
    
  # Event streaming
  events:
    enabled: true
    provider: "nats"
    nats:
      url: "nats://localhost:4222"
      cluster: true
      jetstream: true
      subjects:
        attestation_requests: "attestation.requests"
        attestation_results: "attestation.results"
        anomaly_alerts: "anomaly.alerts"
        corim_events: "corim.events"  # CoRIM-specific events

  # Policy engine with CoRIM support
  policy_engine:
    enabled: true
    type: "opa"
    policy_paths:
      - "./policies"
    plugins:
      - "nist_800_155"
      - "slsa_level_4"
      - "compliance"
      - "corim_validation"  # CoRIM-aware policy validation

# Security configuration
security:
  api_keys:
    enabled: true
    header_name: "X-API-Key"
    keys:
      - key: "test-api-key-001"
        permissions: ["read", "write", "admin"]
      - key: "corim-upload-key"
        permissions: ["corim:upload", "corim:read"]  # CoRIM-specific permissions
  
  rate_limiting:
    enabled: true
    requests_per_minute: 100
    burst: 10
    
  cors:
    enabled: true
    allowed_origins: ["http://localhost:3000", "https://dashboard.example.com"]
    allowed_methods: ["GET", "POST", "PUT", "DELETE"]
    allowed_headers: ["Content-Type", "Authorization", "X-API-Key"]

# ML-based anomaly detection
ml:
  enabled: true
  detector_type: "isolation_forest"
  config:
    num_trees: 100
    max_depth: 10
    contamination: 0.1
    anomaly_threshold: 0.6
    enabled_features:
      - "cpu_usage"
      - "memory_usage"
      - "network_io"
      - "disk_io"
      - "attestation_frequency"
      - "corim_query_patterns"  # Include CoRIM usage patterns in ML

# Multi-cloud federation
multicloud:
  enabled: true
  providers:
    aws:
      enabled: true
      region: "us-west-2"
      nitro_enclaves: true
    azure:
      enabled: true
      region: "westus2"
      confidential_computing: true
    gcp:
      enabled: true
      region: "us-central1"
      shielded_vms: true

# Consensus configuration for distributed deployments
consensus:
  enabled: true
  algorithm: "raft"
  node_id: "node-1"
  bind_address: "0.0.0.0:8080"
  data_dir: "./raft-data"
  peers:
    - "node-1:8080"
    - "node-2:8080"
    - "node-3:8080"

# Observability and monitoring
metrics:
  enabled: true
  listen_address: ":9090"
  path: "/metrics"
  
tracing:
  enabled: true
  service_name: "health-monitor-with-corim"
  endpoint: "http://localhost:14268/api/traces"
  sample_rate: 0.1

# Logging configuration
logging:
  level: "info"  # Use "debug" to see detailed CoRIM operations
  format: "json"
  output: "stdout"
  
# NATS configuration for event streaming
nats:
  url: "nats://localhost:4222"
  cluster_id: "health-monitor"
  client_id: "health-monitor-1"
  max_reconnects: 5
  reconnect_wait: 2s

# Kafka configuration (alternative to NATS)
kafka:
  brokers: ["localhost:9092"]
  topics:
    attestation: "attestation-events"
    anomaly: "anomaly-alerts"
    corim: "corim-events"
  consumer_group: "health-monitor"
  security:
    enabled: false